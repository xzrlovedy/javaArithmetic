在面向对象程序设计过程中，程序员常常会遇到这种情况：
    设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，
    但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。

例如，去银行办理业务一般要经过以下4个流程：
    取号、排队、办理具体业务、对银行工作人员进行评分等，
    其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，
    可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。

模板方法（Template Method）模式的定义如下：
    定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，
    使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
    它是一种类行为型模式。

该模式的主要优点如下：
    它封装了不变部分，扩展可变部分。
    它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。
    它在父类中提取了公共的部分代码，便于代码复用。
    部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。

该模式的主要缺点如下：
    对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。
    父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，它提高了代码阅读的难度。